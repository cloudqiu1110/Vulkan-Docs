// Copyright (c) 2015-2017 The Khronos Group Inc.
// Copyright notice at https://www.khronos.org/registry/speccopyright.html

// The asciidoc [glossary] template cannot contain subsections.
// The abbreviations and prefixes probably belong in the upcoming
// API/extension-writing-guidelines appendix, anyway.

[glossary]
= 术语表

本节定义的术语在本文档中通篇使用，可能全小写或者大写字母开头。

Accessible (Descriptor Binding)  [可访问性]::
    若着色器阶段被包含在绑定描述符的pname:stageFlags中，一个绑定描述符对于该着色器阶段可访问。使用该绑定的描述符只能在能够访问它们的阶段中使用。

Acquire Operation (Resource) [获取操作(资源)]::
    一个操作，其获取图像子资源或者缓冲区区间的所有权。

Adjacent Vertex  [相邻顶点]::
    一个顶点，属于相邻的图元，而非指定的图元本身，顶点可以在几何着色器中访问到。

Aliased Range (Memory)  [异名(内存)]::
    device内存分配的一段区间，其同时被绑定到多个资源。

Allocation Scope [分配作用域]::
    An association of a host memory allocation to a parent object or
    command, where the allocation's lifetime ends before or at the same time
    as the parent object is freed or destroyed, or during the parent
    command.

API Order  API顺序::
    一系列的规则，其掌控绘制命令中的原语如何影响帧缓冲区。

Aspect (Image)  ::
    An image may: contain multiple kinds, or aspects, of data for each
    pixel, where each aspect is used in a particular way by the pipeline and
    may: be stored differently or separately from other aspects.
    For example, the color components of an image format make up the color
    aspect of the image, and may: be used as a framebuffer color attachment.
    Some operations, like depth testing, operate only on specific aspects of
    an image.
    Others operations, like image/buffer copies, only operate on one aspect
    at a time.

Attachment (Render Pass)  附件()::
    A zero-based integer index name used in render pass creation to refer to
    a framebuffer attachment that is accessed by one or more subpasses.
    The index also refers to an attachment description which includes
    information about the properties of the image view that will later be
    attached.

Availability Operation::
    An operation that causes the values generated by specified memory write
    accesses to become available for future access.

Available 可用::
    写入到内存的值可以被 state of values written to memory that allows them to be made visible.

Back-Facing::
    See Facingness.

Batch[批量]::
    A single structure submitted to a queue as part of a
    <<devsandqueues-submission, queue submission command>>, describing a set
    of queue operations to execute.

Backwards Compatibility [向后兼容]::
    若一个应用程序，依赖于早期的specification定义的功能与有效行为，它可以不经修改而在后续的每一个版本中运行，那么它
	所使用的API版本就是向后兼容的。这假设应用程序不会因检测到不同版本而不运行。

Full Compatibility[全兼容]::
    A given version of the API is fully compatible with another version if
    an application, relying only on valid behavior and functionality defined
    by either of those specifications, is able to correctly run against each
    version without any modification.
    This assumes no active attempt by that application to not run when it
    detects a different version.

Binding (Memory) [绑定(内存)]::
    An association established between a range of a resource object and a
    range of a memory object.
    These associations determine the memory locations affected by operations
    performed on elements of a resource object.
    Memory bindings are established using the flink:vkBindBufferMemory
    command for non-sparse buffer objects, using the flink:vkBindImageMemory
    command for non-sparse image objects, and using the
    flink:vkQueueBindSparse command for sparse resources.

Blend Constant [混合常量]::
    Four floating point (RGBA) values used as an input to blending.

Blending [混合]::
    同一个颜色附件中在不同颜色值之间的算术操作，以产生最终的颜色。

Buffer [缓冲区]::
    A resource that represents a linear array of data in device memory.
    Represented by a slink:VkBuffer object.

Buffer View [缓冲区视图]::
    An object that represents a range of a specific buffer, and state that
    controls how the contents are interpreted.
    Represented by a slink:VkBufferView object.

Built-In Variable [内置变量]::
    A variable decorated in a shader, where the decoration makes the
    variable take values provided by the execution environment or values
    that are generated by fixed-function pipeline stages.

Built-In Interface Block [内置接口块]::
    A block defined in a shader that contains only variables decorated with
    built-in decorations, and is used to match against other shader stages.

Clip Coordinates [剪裁坐标]::
    The homogeneous coordinate space that vertex positions (code:Position
    decoration) are written in by vertex processing stages.

Clip Distance [剪裁距离]::
    A built-in output from vertex processing stages that defines a clip
    half-space against which the primitive is clipped.

Clip Volume [剪裁体积]::
    The intersection of the view volume with all clip half-spaces.

Color Attachment [颜色附件]::
    A subpass attachment point, or image view, that is the target of
    fragment color outputs and blending.

Color Renderable Format::
    A elink:VkFormat where ename:VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT is
    set in the pname:optimalTilingFeatures or pname:linearTilingFeatures
    field of VkFormatProperties::optimalTilingFeatures returned by
    vkGetPhysicalDeviceFormatProperties, depending on the tiling used.

Combined Image Sampler::
    A descriptor type that includes both a sampled image and a sampler.

Command Buffer [命令缓冲区]::
    An object that records commands to be submitted to a queue.
    Represented by a slink:VkCommandBuffer object.

Command Pool []::
    An object that command buffer memory is allocated from, and that owns
    that memory.
    Command pools aid multithreaded performance by enabling different
    threads to use different allocators, without internal synchronization on
    each use.
    Represented by a slink:VkCommandPool object.

Compatible Allocator []::
    When allocators are compatible, allocations from each allocator can: be
    freed by the other allocator.

Compatible Image Formats []::
    When formats are compatible, images created with one of the formats can:
    have image views created from it using any of the compatible formats.

Compatible Queues []::
    Queues within a queue family.
    Compatible queues have identical properties.

Component (Format) []::
    A distinct part of a format.
    Depth, stencil, and color channels (e.g. R, G, B, A), are all separate
    components.

Compressed Texel Block []::
    An element of an image having a block-compressed format, comprising a
    rectangular block of texel values that are encoded as a single value in
    memory.
    Compressed texel blocks of a particular block-compressed format have a
    corresponding width, height, and depth that define the dimensions of
    these elements in units of texels, and a size in bytes of the encoding
    in memory.

Cull Distance  剔除距离::
    由顶点处理阶段 A built-in output from vertex processing stages that defines a cull
    half-space where the primitive is rejected if all vertices have a
    negative value for the same cull distance.

Cull Volume  剔除椎体::
    有所有剔除半平面交叉构成的可视空间。

Decoration (SPIR-V)::
     Auxiliary information such as built-in variables, stream numbers,
     invariance, interpolation type, relaxed precision, etc., added to
     variables or structure-type members through decorations.

Depth/Stencil Attachment::
    A subpass attachment point, or image view, that is the target of depth
    and/or stencil test operations and writes.

Depth/Stencil Format::
    A elink:VkFormat that includes depth and/or stencil components.

Depth/Stencil Image (or ImageView)::
    A slink:VkImage (or slink:VkImageView) with a depth/stencil format.

Derivative Group::
    A set of fragment shader invocations that cooperate to compute
    derivatives, including implicit derivatives for sampled image
    operations.

Descriptor 描述符::
    关于一个资源或者资源视图的信息被写入到一个描述符集合，用于在着色器中访问资源或者视图。

Descriptor Binding 描述符绑定::
    An entry in a descriptor set layout corresponding to zero or more
    descriptors of a single descriptor type in a set.
    Defined by a slink:VkDescriptorSetLayoutBinding structure.

Descriptor Pool::
    An object that descriptor sets are allocated from, and that owns the
    storage of those descriptor sets.
    Descriptor pools aid multithreaded performance by enabling different
    threads to use different allocators, without internal synchronization on
    each use.
    Represented by a slink:VkDescriptorPool object.

Descriptor Set []::
    An object that resource descriptors are written into via the API, and
    that can: be bound to a command buffer such that the descriptors
    contained within it can: be accessed from shaders.
    Represented by a slink:VkDescriptorSet object.

Descriptor Set Layout []::
    An object that defines the set of resources (types and counts) and their
    relative arrangement (in the binding namespace) within a descriptor set.
    Used when allocating descriptor sets and when creating pipeline layouts.
    Represented by a slink:VkDescriptorSetLayout object.

Device 设备::
    处理器与执行环境，应用程序通过Vulkan API  让其执行的任务。

Device Memory 设备内存::
    可以被device（设备）访问到的内存。通过 slink:VkDeviceMemory 对象表示。

Device-Level Object  设备级别对象::
    逻辑设备对象和他们的子对象为例，slink:VkDevice， slink:VkQueue，与 slink:VkCommandBuffer 对象是设备级别的对象。

Device-Local Memory 设备端内存::
    连接到设备的内存，设备端访问它，会比访问主机端内存快速很多。

Direct Drawing Commands  直接绘制命令::
    _绘制命令_ that take all their parameters as direct arguments to
    the command (and not sourced via structures in buffer memory as the
    _indirect drawing commands_).
    Includes flink:vkCmdDraw, and flink:vkCmdDrawIndexed.

Dispatchable Handle::
    A handle of a pointer handle type which may: be used by layers as part
    of intercepting API commands.
    The first argument to each Vulkan command is a dispatchable handle type.

Dispatching Commands::
    Commands that provoke work using a compute pipeline.
    Includes flink:vkCmdDispatch and flink:vkCmdDispatchIndirect.

Drawing Commands  绘制命令::
    使用图形管线唤起工作的命令。包含 flink:vkCmdDraw， flink:vkCmdDrawIndexed，flink:vkCmdDrawIndirect,
ifdef::VK_AMD_draw_indirect_count[]
    flink:vkCmdDrawIndirectCountAMD, flink:vkCmdDrawIndexedIndirectCountAMD,
endif::VK_AMD_draw_indirect_count[]
    and flink:vkCmdDrawIndexedIndirect.

Duration (Command)::
    The _duration_ of a Vulkan command refers to the interval between
    calling the command and its return to the caller.

Dynamic Storage Buffer::
    A storage buffer whose offset is specified each time the storage buffer
    is bound to a command buffer via a descriptor set.

Dynamic Uniform Buffer []::
    A uniform buffer whose offset is specified each time the uniform buffer
    is bound to a command buffer via a descriptor set.

Dynamically Uniform []::
    See _Dynamically Uniform_ in section 2.2 "`Terms`" of the
    <<spirv-spec,Khronos SPIR-V Specification>>.

Element Size  元素数量::
    The size (in bytes) used to store one element of an uncompressed format
    or the size (in bytes) used to store one block of a block-compressed
    format.

Explicitly-Enabled Layer::
    A layer enabled by the application by adding it to the enabled layer
    list in flink:vkCreateInstance or flink:vkCreateDevice.

Event []::
    A synchronization primitive that is signaled when execution of previous
    commands complete through a specified set of pipeline stages.
    Events can be waited on by the device and polled by the host.
    Represented by a slink:VkEvent object.

Executable State (Command Buffer)::
    A command buffer that has ended recording commands and can: be executed.
    See also Initial State and Recording State.

Execution Dependency::
    A dependency that guarantees that certain pipeline stages' work for a
    first set of commands has completed execution before certain pipeline
    stages' work for a second set of commands begins execution.
    This is accomplished via pipeline barriers, subpass dependencies,
    events, or implicit ordering operations.

Execution Dependency Chain::
    A sequence of execution dependencies that transitively act as a single
    execution dependency.

Extension Scope []::
    The set of objects and commands that can: be affected by an extension.
    Extensions are either device scope or instance scope.

External synchronization []::
    A type of synchronization required: of the application, where parameters
    defined to be externally synchronized must: not be used simultaneously
    in multiple threads.

Facingness (Polygon)  多边形朝向::
    A classification of a polygon as either front-facing or back-facing,
    depending on the orientation (winding order) of its vertices.

Fence  栅栏::
    A synchronization primitive that is signaled when a set of batches or
    sparse binding operations complete execution on a queue.
    Fences can: be waited on by the host.
    Represented by a slink:VkFence object.

Flat Shading []::
    A property of a vertex attribute that causes the value from a single
    vertex (the provoking vertex) to be used for all vertices in a
    primitive, and for interpolation of that attribute to return that single
    value unaltered.

Fragment Input Attachment Interface::
    A fragment shader entry point's variables with code:UniformConstant
    storage class and a decoration of code:InputAttachmentIndex, which
    receive values from input attachments.

Fragment Output Interface []::
    A fragment shader entry point's variables with code:Output storage
    class, which output to color and/or depth/stencil attachments.

Framebuffer  帧缓冲区::
    A collection of image views and a set of dimensions that, in conjunction
    with a render pass, define the inputs and outputs used by drawing
    commands.
    Represented by a slink:VkFramebuffer object.

Framebuffer Attachment::
    One of the image views used in a framebuffer.

Framebuffer Coordinates  帧缓冲区坐标系::
    A coordinate system in which adjacent pixels' coordinates differ by 1 in
    x and/or y, with [eq]#(0,0)# in the upper left corner and pixel centers
    at half-integers.

Framebuffer-Space::
    Operating with respect to framebuffer coordinates.

Framebuffer-Local []::
    A framebuffer-local dependency guarantees that only for a single
    framebuffer region, the first set of operations happens-before the
    second set of operations.

Framebuffer-Global::
    A framebuffer-global dependency guarantees that for all framebuffer
    regions, the first set of operations happens-before the second set of
    operations.

Framebuffer Region::
    A framebuffer region is a set of sample (x, y, layer, sample)
    coordinates that is a subset of the entire framebuffer.

Front-Facing  正面朝向::
    See Facingness.

Global Workgroup []::
    A collection of local workgroups dispatched by a single dispatch
    command.

Handle  []::
    An opaque integer or pointer value used to refer to a Vulkan object.
    Each object type has a unique handle type.

Happen-after []::
    A transitive, irreflexive and antisymmetric ordering relation between
    operations.
    An execution dependency with a source of *A* and a destination of *B*
    enforces that *B* happens-after *A*.
    The inverse relation of happens-before.

Happen-before 在之前发生::
    A transitive, irreflexive and antisymmetric ordering relation between
    operations.
    An execution dependency with a source of *A* and a destination of *B*
    enforces that *A* happens-before *B*.
    The inverse relation of happens-after.

Helper Invocation::
    A fragment shader invocation that is created solely for the purposes of
    evaluating derivatives for use in non-helper fragment shader
    invocations, and which does not have side effects.

Host []::
    The processor(s) and execution environment that the application runs on,
    and that the Vulkan API is exposed on.

Host Memory 主机内存::
    不能被设备访问到的内存，用于存储Vulkan实现的数据结构。

Host-Accessible Subresource::
    A buffer, or a linear image subresource in either the
    ename:VK_IMAGE_LAYOUT_PREINITIALIZED or ename:VK_IMAGE_LAYOUT_GENERAL
    layout.
    Host-accessible subresources have a well-defined addressing scheme which
    can be used by the host.

Host-Local Memory  主机端内存::
    非设备端内存，设备访问它时，比访问设备端内存快很多。

Host-Visible Memory  主机端可见内存::
    Device memory that can: be mapped on the host and can: be read and
    written by the host.

Identically Defined Objects []::
    Objects of the same type where all arguments to their creation or
    allocation functions, with the exception of pname:pAllocator, are +
    . Vulkan handles which refer to the same object or
    . identical scalar or enumeration values or
    . CPU pointers which point to an array of values or structures which
      also satisfy these three constraints.

Image  图像::
    A resource that represents a multi-dimensional formatted interpretation
    of device memory.
    Represented by a slink:VkImage object.

Image Subresource  图像子资源::
    A specific mipmap level and layer of an image.

Image Subresource Range []::
    A set of image subresources that are contiguous mipmap levels and
    layers.

Image View []::
    An object that represents an image subresource range of a specific
    image, and state that controls how the contents are interpreted.
    Represented by a slink:VkImageView object.

Immutable Sampler::
    A sampler descriptor provided at descriptor set layout creation time,
    and that is used for that binding in all descriptor sets allocated from
    the layout, and cannot be changed.

Implicitly-Enabled Layer []::
    A layer enabled by a loader-defined mechanism outside the Vulkan API,
    rather than explicitly by the application during instance or device
    creation.

Index Buffer []::
    A buffer bound via flink:vkCmdBindIndexBuffer which is the source of
    index values used to fetch vertex attributes for a
    flink:vkCmdDrawIndexed or flink:vkCmdDrawIndexedIndirect command.

Indexed Drawing Commands []::
    _Drawing commands_ which use an _index buffer_ as the source of index
    values used to fetch vertex attributes for a drawing command.
    Includes flink:vkCmdDrawIndexed,
ifdef::VK_AMD_draw_indirect_count[]
    flink:vkCmdDrawIndexedIndirectCountAMD,
endif::VK_AMD_draw_indirect_count[]
    and flink:vkCmdDrawIndexedIndirect.

Indirect Commands []::
    Drawing or dispatching commands that source some of their parameters
    from structures in buffer memory.
    Includes flink:vkCmdDrawIndirect, flink:vkCmdDrawIndexedIndirect,
ifdef::VK_AMD_draw_indirect_count[]
    flink:vkCmdDrawIndirectCountAMD, flink:vkCmdDrawIndexedIndirectCountAMD,
endif::VK_AMD_draw_indirect_count[]
    and flink:vkCmdDispatchIndirect.

ifdef::VK_NVX_device_generated_commands[]
Indirect Commands Layout::
    A definition of a sequence of commands, that are generated on the device
    via flink:vkCmdProcessCommandsNVX.
    Each sequence is comprised of multiple
    elink:VkIndirectCommandsTokenTypeNVX, which represent a subset of
    traditional command buffer commands.
    Represented as slink:VkIndirectCommandsLayoutNVX.
endif::VK_NVX_device_generated_commands[]

Indirect Drawing Commands::
    _Drawing commands_ that source some of their parameters from structures
    in buffer memory.
    Includes flink:vkCmdDrawIndirect,
ifdef::VK_AMD_draw_indirect_count[]
    flink:vkCmdDrawIndirectCountAMD, flink:vkCmdDrawIndexedIndirectCountAMD,
endif::VK_AMD_draw_indirect_count[]
    and flink:vkCmdDrawIndexedIndirect.

Initial State (Command Buffer) []::
    A command buffer that has not begun recording commands.
    See also Recorded State and Executable State.

Input Attachment  []::
    A descriptor type that represents an image view, and supports unfiltered
    read-only access in a shader, only at the fragment's location in the
    view.

Instance  []::
    The top-level Vulkan object, which represents the application's
    connection to the implementation.
    Represented by a slink:VkInstance object.

Instance-Level Object []::
    High-level Vulkan objects, which are not logical devices, nor children
    of logical devices.
    For example, slink:VkInstance and slink:VkPhysicalDevice objects are
    instance-level objects.

Internal Synchronization []::
    A type of synchronization required: of the implementation, where
    parameters not defined to be externally synchronized may: require
    internal mutexing to avoid multithreaded race conditions.

Invocation (Shader)::
    A single execution of an entry point in a SPIR-V module.
    For example, a single vertex's execution of a vertex shader or a single
    fragment's execution of a fragment shader.

Invocation Group::
    A set of shader invocations that are executed in parallel and that must:
    execute the same control flow path in order for control flow to be
    considered dynamically uniform.

Local Workgroup []::
    A collection of compute shader invocations invoked by a single dispatch
    command, which share shared memory and can synchronize with each other.

Logical Device []::
    An object that represents the application's interface to the physical
    device.
    The logical device is the parent of most Vulkan objects.
    Represented by a slink:VkDevice object.

Logical Operation::
    Bitwise operations between a fragment color value and a value in a color
    attachment, that produce a final color value to be written to the
    attachment.

Lost Device  设备丢失::
    A state that a logical device may: be in as a result of hardware errors
    or other exceptional conditions.

Mappable []::
    See Host-Visible Memory.

Memory Dependency  []::
    A memory dependency is an execution dependency which includes
    availability and visibility operations such that:

  * The first set of operations happens-before the availability operation
  * The availability operation happens-before the visibility operation
  * The visibility operation happens-before the second set of operations

Memory Heap []::
    A region of memory from which device memory allocations can: be made.

Memory Type []::
    An index used to select a set of memory properties (e.g. mappable,
    cached) for a device memory allocation.

Mip Tail Region []::
    The set of mipmap levels of a sparse residency texture that are too
    small to fill a sparse block, and that must: all be bound to memory
    collectively and opaquely.

Non-Dispatchable Handle []::
    A handle of an integer handle type.
    Handle values may: not be unique, even for two objects of the same type.

Non-Indexed Drawing Commands::
    _Drawing commands_ for which the vertex attributes are sourced in linear
    order from the vertex input attributes for a drawing command (i.e. they
    do not use an _index buffer_).
    Includes flink:vkCmdDraw,
ifdef::VK_AMD_draw_indirect_count[]
    flink:vkCmdDrawIndirectCountAMD,
endif::VK_AMD_draw_indirect_count[]
    and flink:vkCmdDrawIndirect.

Normalized []::
    A value that is interpreted as being in the range [eq]#[0,1]# as a
    result of being implicitly divided by some other value.

Normalized Device Coordinates::
    A coordinate space after perspective division is applied to clip
    coordinates, and before the viewport transformation converts to
    framebuffer coordinates.

ifdef::VK_NVX_device_generated_commands[]
Object Table::
    A binding table for various resources (slink:VkPipeline, slink:VkBuffer,
    slink:VkDescriptorSet), so that they can be referenced in
    device-generated command processing.
    Represented as slink:VkObjectTableNVX.
    Entries are registered or unregistered via ftext:uint32_t indices.
endif::VK_NVX_device_generated_commands[]

Overlapped Range (Aliased Range)::
    The aliased range of a device memory allocation that intersects a given
    image subresource of an image or range of a buffer.

Ownership (Resource)::
    If an entity (e.g. a queue family) has ownership of a resource, access
    to that resource is well-defined for access by that entity.

Packed Format []::
    A format whose components are stored as a single data element in memory,
    with their relative locations defined within that element.

Physical Device []::
    An object that represents a single device in the system.
    Represented by a slink:VkPhysicalDevice object.

Pipeline []::
    An object that controls how graphics or compute work is executed on the
    device.
    A pipeline includes one or more shaders, as well as state controlling
    any non-programmable stages of the pipeline.
    Represented by a slink:VkPipeline object.

Pipeline Barrier []::
    An execution and/or memory dependency recorded as an explicit command in
    a command buffer, that forms a dependency between the previous and
    subsequent commands.

Pipeline Cache  []::
    An object that can: be used to collect and retrieve information from
    pipelines as they are created, and can: be populated with previously
    retrieved information in order to accelerate pipeline creation.
    Represented by a slink:VkPipelineCache object.

Pipeline Layout  []::
    An object that defines the set of resources (via a collection of
    descriptor set layouts) and push constants used by pipelines that are
    created using the layout.
    Used when creating a pipeline and when binding descriptor sets and
    setting push constant values.
    Represented by a slink:VkPipelineLayout object.

Pipeline Stage []::
    A logically independent execution unit that performs some of the
    operations defined by an action command.

Point Sampling (Rasterization)::
    A rule that determines whether a fragment sample location is covered by
    a polygon primitive by testing whether the sample location is in the
    interior of the polygon in framebuffer-space, or on the boundary of the
    polygon according to the tie-breaking rules.

ifdef::VK_KHR_swapchain[]
Presentable image::
    A sname:VkImage object obtained from a sname:sname:VkSwapchainKHR used
    to present to a sname:VkSurfaceKHR object.
endif::VK_KHR_swapchain[]

Preserve Attachment []::
    One of a list of attachments in a subpass description that is not read
    or written by the subpass, but that is read or written on earlier and
    later subpasses and whose contents must be preserved through this
    subpass.

Primary Command Buffer []::
    A command buffer that can: execute secondary command buffers, and can:
    be submitted directly to a queue.

Primitive Topology  []::
    State that controls how vertices are assembled into primitives, e.g. as
    lists of triangles, strips of lines, etc..

Provoking Vertex  [激活顶点]::
	一个图元的顶点，
    The vertex in a primitive from which flat shaded attribute values are
    taken.
    This is generally the "`first`" vertex in the primitive, and depends on
    the primitive topology.

Push Constants []::
    A small bank of values writable via the API and accessible in shaders.
    Push constants allow the application to set values used in shaders
    without creating buffers or modifying and binding descriptor sets for
    each update.

Push Constant Interface::
    The set of variables with code:PushConstant storage class that are
    statically used by a shader entry point, and which receive values from
    push constant commands.

Query Pool [队列池]::
	一个对象，包含多个查询条目，和它们关联的状态与结果。通过 slink:VkQueryPool 类型对象表示。

Queue  [队列]::
	一个对象，它执行命令缓冲区和一个设备上的稀疏绑定操作。
	通过 slink:VkQueue 类型对象表示。

Queue Family  [队列族]::
	一些队列，它们都有相同的属性，支持同样的操作，通过 slink:VkQueueFamilyProperties 类型表示。

Queue Operation  []::
    A unit of work to be executed by a specific queue on a device, submitted
    via a <<devsandqueues-submission, queue submission command>>.
    Each queue submission command details the specific queue operations that
    occur as a result of calling that command.
    Queue operations typically include work that is specific to each
    command, and synchronization tasks.

Queue Submission []::
    Zero or more batches and an optional fence to be signaled, passed to a
    command for execution on a queue.
    See the <<devsandqueues-submission, Devices and Queues chapter>> for
    more information.

Recording State (Command Buffer)::
    A command buffer that is ready to record commands.
    See also Initial State and Executable State.

Release Operation (Resource)  []::
    An operation that releases ownership of an image subresource or buffer
    range.

Render Pass ::
	一个对象，表示一系列的帧缓冲区附件，和使用到这些附件的渲染阶段。通过slink:VkRenderPass 对象表示。

Render Pass Instance []::
    A use of a render pass in a command buffer.

Reset (Command Buffer)  [重置（命令缓冲区）]::
	重置一个命令缓冲区将导致直接丢弃之前记录的命令，并把命令缓冲区置为初始状态。   

Residency Code []::
    An integer value returned by sparse image instructions, indicating
    whether any sparse unbound texels were accessed.

Resolve Attachment  []::
    A subpass attachment point, or image view, that is the target of a
    multisample resolve operation from the corresponding color attachment at
    the end of the subpass.

Sampled Image []::
    A descriptor type that represents an image view, and supports filtered
    (sampled) and unfiltered read-only acccess in a shader.

Sampler  [采样结果] ::
	（OpenGL中一些开发者喜欢翻译为 采样器，但是，我不大喜欢这个翻译。https://www.khronos.org/opengl/wiki/Sampler_(GLSL) 中解释过。）
    一个对象，包含了在着色器中控制图像数据如何被采样的状态信息。 同样也是一个类型描述符，描述了对象类型。
	通过 slink:VkSampler 类型表示。

Secondary Command Buffer  []::
    A command buffer that can: be executed by a primary command buffer, and
    must: not be submitted directly to a queue.

Self-Dependency []::
    A subpass dependency from a subpass to itself, i.e. with
    pname:srcSubpass equal to pname:dstSubpass.
    A self-dependency is not automatically performed during a render pass
    instance, rather a subset of it can: be performed via
    flink:vkCmdPipelineBarrier during the subpass.

Semaphore  [信号量]::
    一种同步原语，支持限号和等待操作，可以用于在队列内或者队列之间的同步操作。
    通过 slink:VkSemaphore 对象表示。

Shader  []::
    Instructions selected (via an entry point) from a shader module, which
    are executed in a shader stage.

Shader Code [着色器代码]::
    在着色器中用于描述操作的一串指令。

Shader Module [着色器模块]::
    A collection of shader code, potentially including several functions and
    entry points, that is used to create shaders in pipelines.
    Represented by a slink:VkShaderModule object.

Shader Stage  [着色器阶段]::
	执行着色器代码的图形或者计算管线阶段。    

Side Effect  [副作用]::
    A store to memory or atomic operation on memory from a shader
    invocation.

Sparse Block  []::
    An element of a sparse resource that can be independently bound to
    memory.
    Sparse blocks of a particular sparse resource have a corresponding size
    in bytes that they use in the bound memory.

Sparse Image Block::
    A sparse block in a sparse partially-resident image.
    In addition to the sparse block size in bytes, sparse image blocks have
    a corresponding width, height, and depth that define the dimensions of
    these elements in units of texels or compressed texel blocks, the latter
    being used in case of sparse images having a block-compressed format.

Sparse Unbound Texel::
    A texel read from a region of a sparse texture that does not have memory
    bound to it.

Static Use []::
    An object in a shader is statically used by a shader entry point if any
    function in the entry point's call tree contains an instruction using
    the object.
    Static use is used to constrain the set of descriptors used by a shader
    entry point.

Storage Buffer []::
    A descriptor type that represents a buffer, and supports reads, writes,
    and atomics in a shader.

Storage Image []::
    A descriptor type that represents an image view, and supports unfiltered
    loads, stores, and atomics in a shader.

Storage Texel Buffer []::
    A descriptor type that represents a buffer view, and supports
    unfiltered, formatted reads, writes, and atomics in a shader.

ifdef::VK_EXT_shader_subgroup_vote[]
Subgroup::
    The set of shader invocations exposed as running concurrently with the
    current shader invocation.
    In compute shaders, the _local workgroup_ is a superset of the subgroup.
endif::VK_EXT_shader_subgroup_vote[]

ifdef::VK_EXT_shader_subgroup_ballot[]
Subgroup Mask::
    A bitmask for all invocations in the current subgroup with one bit per
    invocation, starting with the least significant bit in the first vector
    component, continuing to the last bit (less than code:SubgroupSize) in
    the last required vector component.
endif::VK_EXT_shader_subgroup_ballot[]

Subpass []::
    A phase of rendering within a render pass, that reads and writes a
    subset of the attachments.

Subpass Dependency []::
    An execution and/or memory dependency between two subpasses described as
    part of render pass creation, and automatically performed between
    subpasses in a render pass instance.
    A subpass dependency limits the overlap of execution of the pair of
    subpasses, and can: provide guarantees of memory coherence between
    accesses in the subpasses.

Subpass Description::
    Lists of attachment indices for input attachments, color attachments,
    depth/stencil attachment, resolve attachments, and preserve attachments
    used by the subpass in a render pass.

Subset (Self-Dependency) []::
    A subset of a self-dependency is a pipeline barrier performed during the
    subpass of the self-dependency, and whose stage masks and access masks
    each contain a subset of the bits set in the identically named mask in
    the self-dependency.

Texel Coordinate System [纹理坐标系统]::
	三种坐标系系统（归一化，未归一化，整数）之一，定义了如何在一张图像或者mipmap层级图像中解读 纹理坐标的值。

Uniform Texel Buffer []::
	一种描述符类型，表示一个缓冲区视图，支持着色器的 unfiltered, formatted 与只读访问。

Uniform Buffer [uniform缓冲区]::
	一种描述符类型，表示一个缓冲区，且支持着色器中的只读访问。

Unnormalized [未归一化的]::
	一个值，依其惯例来解读，并没有被归一化。    

User-Defined Variable Interface [用户定义的变量接口]::
	一个着色器如可变量，带有 code:Input 或 code:Output 存储类型，且不失内置的变量。    

Vertex Input Attribute [顶点输入属性]::
	一个图形管线资源，它未顶点着色器产生输入值，通过从一个顶点输入绑定读入数据，并转换为属性的格式。

Vertex Input Binding [顶点输入绑定]::
	一个被绑定到缓冲区的图形管线资源，包含影响该缓冲区内寻址计算的状态。

Vertex Input Interface [顶点数据接口]::
    顶点着色器入口点变量，带有 code:Input 存储类型，它接受顶点输入属性的值。

Vertex Processing Stages [顶点处理阶段]::
    一系列的着色器阶段，包含：顶点着色器，细分控制着色器，细分求值着色器，几何着色器。

View Volume [可视体积]::
     在齐次坐标系下的一个子空间，对应[-1, 1]之间的投影后的x、y值，在[0, 1]之间的z值。    

Viewport Transformation  [viewport 变换]::
    根据viewport矩形和深度范围，从归一化的设备坐标系转换为缓冲区坐标系。

Visibility Operation [可见性操作]::
    一个操作，它导致一些可用的内容 对特定的内存访问 变得可见。
    An operation that causes available values to become visible to specified
    memory accesses.

Visible  [可见]::
    一种状态：一些内容被写入内存，它们可以被其他的操作可访问。


// To be added per issue 18:
// Current State <<fundamentals-queueoperation>>
// Barycentric Coordinates <<primsrast-polygons-basic>>
// Internal Allocations <<memory-host-allocation-scope>>
// Unavailable, Available <<queries-operation>> - NB: this clashes with available/visible in terms of memory
// Signaled, Unsignaled <<synchronization-semaphores>> <<synchronization-fences>>
// Interior Vertices <<tessellation-tessellator-spacing>>
// Inner Vertices <<tessellation-triangle-tessellation>> <<tessellation-quad-tessellation>>
// Isolines <<tessellation-isoline-tessellation>>
// Binding Range <<sparsemem-memory-binding>>


[glossary]
= Common Abbreviations

Abbreviations and acronyms are sometimes used in the Specification and the
API where they are considered clear and commonplace, and are defined here:

Src::
    Source

Dst::
    Destination

Min::
    Minimum

Max::
    Maximum

Rect::
    Rectangle

Info::
    Information

LOD::
    Level of Detail

ID::
    Identifier

UUID::
    Universally Unique Identifier

Op::
    Operation

R::
    Red color component

G::
    Green color component

B::
    Blue color component

A::
    Alpha color component


[glossary]
= Prefixes

Prefixes are used in the API to denote specific semantic meaning of Vulkan
names, or as a label to avoid name clashes, and are explained here:

VK/Vk/vk::
    Vulkan namespace +
    All types, commands, enumerants and defines in this specification are
    prefixed with these two characters.

PFN/pfn::
    Function Pointer +
    Denotes that a type is a function pointer, or that a variable is of a
    pointer type.

p::
    Pointer +
    Variable is a pointer.

vkCmd::
    Commands that record commands in command buffers +
    These API commands do not result in immediate processing on the device.
    Instead, they record the requested action in a command buffer for
    execution when the command buffer is submitted to a queue.

s::
    Structure +
    Used to denote the etext:VK_STRUCTURE_TYPE* member of each structure in
    pname:sType
