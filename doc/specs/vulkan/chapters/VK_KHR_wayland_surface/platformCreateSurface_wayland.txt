// Copyright (c) 2014-2017 The Khronos Group Inc.
// Copyright notice at https://www.khronos.org/registry/speccopyright.html

[[platformCreateSurface_wayland,platformCreateSurface_wayland]]

=== Wayland Platform

// refBegin vkCreateWaylandSurfaceKHR - Create a slink:VkSurfaceKHR object for a Wayland window

To create a sname:VkSurfaceKHR object for a Wayland surface, call:

include::../../api/protos/vkCreateWaylandSurfaceKHR.txt[]

  * pname:instance is the instance to associate the surface with.
  * pname:pCreateInfo is a pointer to an instance of the
    slink:VkWaylandSurfaceCreateInfoKHR structure containing parameters
    affecting the creation of the surface object.
  * pname:pAllocator is the allocator used for host memory allocated for the
    surface object when there is no more specific allocator available (see
    <<memory-allocation,Memory Allocation>>).
  * pname:pSurface points to a sname:VkSurfaceKHR handle in which the
    created surface object is returned.

include::../../validity/protos/vkCreateWaylandSurfaceKHR.txt[]

// refBegin VkWaylandSurfaceCreateInfoKHR - Structure specifying parameters of a newly created Wayland surface object

The sname:VkWaylandSurfaceCreateInfoKHR structure is defined as:

include::../../api/structs/VkWaylandSurfaceCreateInfoKHR.txt[]

  * pname:sType 是数据结构的类型。
  * pname:pNext is `NULL` or a pointer to an extension-specific structure.
  * pname:flags is reserved for future use.
  * pname:display and pname:surface are pointers to the Wayland
    code:wl_display and code:wl_surface to associate the surface with.

.Valid Usage
****
  * pname:display must: point to a valid Wayland code:wl_display.
  * pname:surface must: point to a valid Wayland code:wl_surface.
****

include::../../validity/structs/VkWaylandSurfaceCreateInfoKHR.txt[]

On Wayland, pname:currentExtent is undefined [eq]#(0xFFFFFFFF, 0xFFFFFFFF)#.
Whatever the application sets a swapchain's pname:imageExtent to will be the
size of the window, after the first image is presented.
pname:minImageExtent is [eq]#(1,1)#, and pname:maxImageExtent is the maximum
supported surface size.

Some Vulkan functions may: send protocol over the specified code:wl_display
connection when using a swapchain or presentable images created from a
sname:VkSurfaceKHR referring to a code:wl_surface.
Applications must: therefore ensure that both the code:wl_display and the
code:wl_surface remain valid for the lifetime of any sname:VkSwapchainKHR
objects created from a particular code:wl_display and code:wl_surface.
Also, calling flink:vkQueuePresentKHR will result in Vulkan sending
code:wl_surface.commit requests to the underlying code:wl_surface of each
sname:VkSwapchainKHR objects referenced by pname:pPresentInfo.
Therefore, if the application wishes to synchronize any window changes with
a particular frame, such requests must: be sent to the Wayland display
server prior to calling flink:vkQueuePresentKHR.
